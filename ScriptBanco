

CREATE TABLE IF NOT EXISTS CLIENTE(
CPF CHAR(14) PRIMARY KEY ,
NOME VARCHAR(30) NOT NULL,
SOBRENOME VARCHAR(40) NOT NULL,
EMAIL VARCHAR(60) NOT NULL,
DATANASC DATE NOT NULL,
CEP CHAR(9),
BAIRRO VARCHAR(50),
RUA VARCHAR(60),
NUMERO VARCHAR(6),
CIDADE CHAR(4),
TELEFONE VARCHAR(14),
CELULAR VARCHAR(14),
DATAREG DATE
);


CREATE TABLE IF NOT EXISTS COMPRA(
ID_COMPRA INTEGER PRIMARY KEY AUTOINCREMENT,
DATA DATE,
VALORTOTAL INTEGER,
VALORDESCONTO INTENGER,
CPF_CLIENTE CHAR(14),
FOREIGN KEY (CPF_CLIENTE) REFERENCES CLIENTE(CPF)
);


CREATE TABLE IF NOT EXISTS ITEM_COMPRA(
ID_ITEMCOMPRA INTEGER PRIMARY KEY AUTOINCREMENT,
PRECOUNITARIO INTEGER,
QUANTIDADE INT,
PRECOTOTAL INTEGER,
ID_PRODUTO INTEGER,
ID_COMPRA INTEGER,
FOREIGN KEY(id_produto) REFERENCES PRODUTO(IDPRODUTO),
FOREIGN KEY (ID_COMPRA) REFERENCES COMPRA (ID_COMPRA)
);

CREATE TABLE IF NOT EXISTS PRODUTO(
IDPRODUTO INTEGER  PRIMARY KEY AUTOINCREMENT,
NOME VARCHAR(45) NOT NULL,
MARCA VARCHAR(45) NOT NULL,
PRECO INTEGER NOT NULL,
DATAREG DATE NOT NULL,
DATAVALIDADE DATE NOT NULL,
ID_CLIENTE INTEGER,
FOREIGN KEY(ID_CLIENTE) REFERENCES CLIENTE(ID_CLIENTE) 
);

CREATE TABLE IF NOT EXISTS SERVICO(
ID_SERVICO INTEGER PRIMARY KEY AUTOINCREMENT,
NOME VARCHAR (30) NOT NULL,
PRECO INTEGER NOT NULL
);


CREATE TABLE IF NOT EXISTS CABELEIREIRO(
CPF CHAR(14) PRIMARY KEY,
EMAIL VARCHAR (60) NOT NULL,
SENHA VARCHAR (60) NOT NULL,
NOME VARCHAR (45) NOT NULL
);

CREATE TABLE IF NOT EXISTS DESPESAS(
ID_DESPESA INTEGER PRIMARY KEY AUTOINCREMENT,
NOME VARCHAR (45) NOT NULL,
VALOR DECIMAL(5,2) NOT NULL,
PAGO BOOLEAN NOT NULL,
REPOE BOOLEAN NOT NULL,
DESCRICAO VARCHAR (200),
DATAVENC DATE NOT NULL,
DATAPAGAMENTO DATE NOT NULL,
DATAREGI DATE NOT NULL,
ID_CABELEIREIRO INT,
FOREIGN KEY(ID_CABELEIREIRO) REFERENCES CABELEIREIRO(ID_CABELEIREIRO) 
);

CREATE TABLE IF NOT EXISTS PRODUTO_SERVICO(
ID_PRODUTO INT,
ID_SERVICO INT,
FOREIGN KEY(ID_PRODUTO) REFERENCES PRODUTO(ID_PRODUTO), 
FOREIGN KEY(ID_SERVICO) REFERENCES SERVICO(ID_SERVICO)
);

CREATE TABLE IF NOT EXISTS ESTOQUE(
ID_ESTOQUE INTEGER PRIMARY KEY AUTOINCREMENT,
QUANTIDADE INT NOT NULL,
BALANCOTOTAL DECIMAL(5,2) NOT NULL
);

CREATE TABLE IF NOT EXISTS PRODUTO_ESTOQUE(
ID_PRODUTO INT,
ID_ESTOQUE INT,
FOREIGN KEY(ID_PRODUTO) REFERENCES PRODUTO(ID_PRODUTO), 
FOREIGN KEY(ID_ESTOQUE) REFERENCES ESTOQUE(ID_ESTOQUE)
);


CREATE TABLE IF NOT EXISTS AGENDAMENTO(
ID_AGENDAMENTO INTEGER PRIMARY KEY AUTOINCREMENT,
DATA DATE NOT NULL,
HORARIO DATETIME NOT NULL,
CPF_CLIENTE CHAR(14) NOT NULL,
FOREIGN KEY(CPF_CLIENTE) REFERENCES CLIENTE(CPF) 
);



SELECT * FROM AGENDAMENTO;
SELECT * FROM AGENDAMENTO_SERVICO;

CREATE TABLE IF NOT EXISTS AGENDAMENTO_SERVICO(
ID_AGENDAMENTO INTEGER,
ID_SERVICO INTEGER,
FOREIGN KEY(ID_AGENDAMENTO) REFERENCES AGENDAMENTO(ID_AGENDAMENTO), 
FOREIGN KEY(ID_SERVICO) REFERENCES SERVICO(ID_SERVICO)
);


CREATE TABLE IF NOT EXISTS ORCAMENTO(
ID_ORCAMENTO INTEGER PRIMARY KEY AUTOINCREMENT,
NOME VARCHAR(30) NOT NULL,
JANEIRO INTEGER NOT NULL,
FEVEREIRO INTEGER NOT NULL,
MARCO INTEGER NOT NULL,
ABRIL INTEGER NOT NULL,
MAIO INTEGER NOT NULL,
JUNHO INTEGER NOT NULL,
JULHO INTEGER NOT NULL,
AGOSTO INTEGER NOT NULL,
SETEMBRO INTEGER NOT NULL,
OUTUBRO INTEGERNOT NULL,
NOVEMBRO INTEGER NOT NULL,
DEZEMBRO INTEGER NOT NULL,
PREVISTO BOOLEAN,
ANO VARCHAR(4)
);



/* TESTES */

SELECT * FROM ORCAMENTO;

SELECT DATETIME('NOW');

INSERT INTO SERVICO (NOME, PRECO) VALUES ("Hidrataçao", 7555);
SELECT * FROM SERVICO;

/*SELECIONA COMPRA DO CABELEIREIRO*/
SELECT NOME,COMPRA.CPF_CLIENTE, VALORTOTAL FROM CABELEIREIRO INNER JOIN COMPRA ON COMPRA.CPF_CLIENTE = CABELEIREIRO.CPF;

/*SELECIONA COMPRA DOS CLIENTE*/
SELECT NOME, VALORTOTAL,DATA FROM COMPRA INNER JOIN CLIENTE ON COMPRA.CPF_CLIENTE = CLIENTE.CPF ORDER BY NOME;


/*SELECIONA PRODUTOS DA COMPRA DOS CLIENTE*/
            SELECT CLIENTE.NOME, ITEM_COMPRA.QUANTIDADE, PRODUTO.NOME FROM (( (COMPRA 
                INNER JOIN ITEM_COMPRA ON COMPRA.ID_COMPRA = ITEM_COMPRA.ID_COMPRA))
                INNER JOIN CLIENTE ON CLIENTE.CPF = COMPRA.CPF_CLIENTE)
                INNER JOIN PRODUTO ON ITEM_COMPRA.ID_PRODUTO = PRODUTO.IDPRODUTO ORDER BY CLIENTE.NOME;
                
/*SELECIONA SERVIÇOS REALIZADO PELOS CLIENTES EM X AGENDAMENTO */

SELECT CLIENTE.NOME, SERVICO.NOME FROM ((
             ((AGENDAMENTO_SERVICO 
             INNER JOIN SERVICO ON SERVICO.ID_SERVICO = AGENDAMENTO_SERVICO.ID_SERVICO )) 
             INNER JOIN AGENDAMENTO ON AGENDAMENTO.ID_AGENDAMENTO = AGENDAMENTO_SERVICO.ID_AGENDAMENTO)
             Inner JOIN CLIENTE ON CLIENTE.CPF = AGENDAMENTO.CPF_CLIENTE);
                            
