CREATE TABLE IF NOT EXISTS CLIENTE(
ID INTEGER PRIMARY KEY AUTOINCREMENT,
CPF CHAR(14),
ID INTEGER DEFAULT NULL,
NOME VARCHAR(30) NOT NULL,
SOBRENOME VARCHAR(40) NOT NULL,
EMAIL VARCHAR(60) NOT NULL,
DATANASC CHAR(10) NOT NULL,
CEP CHAR(9),
BAIRRO VARCHAR(50),
RUA VARCHAR(60),
NUMERO VARCHAR(6),
CIDADE CHAR(4),
TELEFONE VARCHAR(15),
CELULAR VARCHAR(15),
DATAREG DATE,
TIPODECABELO TINYINT DEFAULT 12,
TAMANHOCABELO TINYINT DEFAULT 4,
CORCABELOI VARCHAR(16) DEFAULT "Não Informado",
CONHECEU TINYINT DEFAULT 5,
FACEBOOK VARCHAR(35),
INSTAGRAM VARCHAR(35),
OBSERVACOES TEXT DEFAULT "Nada Informado."

);

CREATE TABLE IF NOT EXISTS EMAILANIVERSARIO(
CPF CHAR(14) NOT NULL,
ULTIMOENVIO DATE,
FOREIGN KEY (CPF) REFERENCES CLIENTE(CPF)
);

CREATE TABLE IF NOT EXISTS EMAILULTIMAVISITA(
CPF CHAR(14) NOT NULL,
ULTIMOENVIO DATE,
FOREIGN KEY (CPF) REFERENCES CLIENTE(CPF)
);

SELECT * FROM EMAILULTIMAVISITA;
SELECT MIN(DATA) FROM AGENDAMENTO;




CREATE TABLE IF NOT EXISTS COMPRA(
ID_COMPRA INTEGER PRIMARY KEY AUTOINCREMENT,
DATA DATE,
VALORTOTAL INTEGER,
VALORDESCONTO INTENGER,
CPF_CABELEIREIRO CHAR(14),
FOREIGN KEY (CPF_CABELEIREIRO) REFERENCES CABELEIREIRO(CPF)

);


CREATE TABLE IF NOT EXISTS ITEM_COMPRA(
ID_ITEMCOMPRA INTEGER PRIMARY KEY AUTOINCREMENT,
PRECOUNITARIO INTEGER,
QUANTIDADE INT,
PRECOTOTAL INTEGER,
ID_PRODUTO INTEGER,
ID_COMPRA INTEGER,
FOREIGN KEY(ID_PRODUTO) REFERENCES PRODUTO(IDPRODUTO),
FOREIGN KEY (ID_COMPRA) REFERENCES COMPRA (ID_COMPRA)
);

CREATE TABLE IF NOT EXISTS VENDA(
ID_VENDA INTEGER PRIMARY KEY AUTOINCREMENT,
DATA DATE,
VALORTOTAL INTEGER,
VALORDESCONTO INTENGER,
CPF_CLIENTE CHAR(14),
FOREIGN KEY (CPF_CLIENTE) REFERENCES CLIENTE(CPF)
);

CREATE TABLE IF NOT EXISTS ITEM_VENDA(
ID_ITEMVENDA INTEGER PRIMARY KEY AUTOINCREMENT,
PRECOUNITARIO INTEGER,
QUANTIDADE INT,
PRECOTOTAL INTEGER,
ID_PRODUTO INTEGER,
ID_VENDA INTEGER,
BOOLEAN DADO_ATIVO,
FOREIGN KEY(ID_PRODUTO) REFERENCES PRODUTO(IDPRODUTO),
FOREIGN KEY (ID_VENDA) REFERENCES COMPRA (ID_VENDA)
);


CREATE TABLE IF NOT EXISTS PRODUTO(
IDPRODUTO INTEGER  PRIMARY KEY AUTOINCREMENT,
NOME VARCHAR(45) NOT NULL,
MARCA VARCHAR(45) NOT NULL,
PRECO INTEGER NOT NULL,
DATAREG DATE NOT NULL
);


CREATE TABLE IF NOT EXISTS SERVICO(
ID_SERVICO INTEGER PRIMARY KEY AUTOINCREMENT,
NOME VARCHAR (30) NOT NULL,
PRECO INTEGER NOT NULL,
TEMPOGASTO DATIME 
);


CREATE TABLE IF NOT EXISTS CABELEIREIRO(
CPF CHAR(14) PRIMARY KEY,
EMAIL VARCHAR (60) NOT NULL,
NOME VARCHAR (45) NOT NULL ,
SENHA VARCHAR(45),
SEGUNDAE DATETIME,
TERCAE DATETIME,
QUARTAE DATETIME,
QUINTAE DATETIME,
SEXTAE DATETIME,
SABADOE DATETIME,
DOMINGOE DATETIME,
SEGUNDAS DATETIME,
TERCAS DATETIME,
QUARTAS DATETIME,
QUINTAS DATETIME,
SEXTAS DATETIME,
SABADOS DATETIME,
DOMINGOS DATETIME,
ENVIARANIVERSARIO BOOLEAN DEFAULT 0,
TITULOANIVERSARIO VARCHAR(60) DEFAULT "Título não informado.",
TEXTOANIVERSARIO TEXT DEFAULT "",
ANEXOANIVERSARIO BLOOB,
NOMEANEXOANIVERSARIO VARCHAR(60),

ENVIARULTIMAVISITA BOOLEAN DEFAULT 0,
TITULOULTIMAVISITA VARCHAR(60) DEFAULT "Título não informado.",
TEXTOULTIMAVISITA TEXT DEFAULT "",
ANEXOULTIMAVISITA BLOOB,
NOMEANEXOULTIMAVISITA VARCHAR(60),
PERIODOULTIMAVISITA INT DEFAULT 2

);


SELECT * FROM EMAILANIVERSARIO;

SELECT * FROM CABELEIREIRO;
PRAGMA foreign_keys = ON;
DROP TABLE COMPRA;
DROP TABLE CABELEIREIRO;

CREATE TABLE IF NOT EXISTS PRODUTO_SERVICO(
ID_PRODUTO INT,
RENDIMENTO INT,
ID_SERVICO INT,
FOREIGN KEY(ID_PRODUTO) REFERENCES PRODUTO(ID_PRODUTO), 
FOREIGN KEY(ID_SERVICO) REFERENCES SERVICO(ID_SERVICO)
);

CREATE TABLE IF NOT EXISTS ESTOQUE(
ID_ESTOQUE INTEGER PRIMARY KEY AUTOINCREMENT,
ID_PRODUTO INTEGER NOT NULL,
QUANTIDADE INTEGER NOT NULL DEFAULT 0,
VALOR_UNITARIO INTEGER 
);

CREATE TABLE IF NOT EXISTS AGENDAMENTO(
ID_AGENDAMENTO INTEGER PRIMARY KEY AUTOINCREMENT,
DATA DATE NOT NULL,
HORARIO DATETIME NOT NULL,
REALIZADO boolean,
TOTAL INTEGER,
DESCONTO INTEGER,
CPF_CLIENTE CHAR(14) NOT NULL
);

CREATE TABLE IF NOT EXISTS AGENDAMENTO_SERVICO(
ID_AGENDAMENTO INTEGER,
ID_SERVICO INTEGER,
FOREIGN KEY(ID_AGENDAMENTO) REFERENCES AGENDAMENTO(ID_AGENDAMENTO), 
FOREIGN KEY(ID_SERVICO) REFERENCES SERVICO(ID_SERVICO)
);


CREATE TABLE IF NOT EXISTS ORCAMENTO(
ID_ORCAMENTO INTEGER PRIMARY KEY AUTOINCREMENT,
NOME VARCHAR(30) NOT NULL,
JANEIRO INTEGER NOT NULL,
FEVEREIRO INTEGER NOT NULL,
MARCO INTEGER NOT NULL,
ABRIL INTEGER NOT NULL,
MAIO INTEGER NOT NULL,
JUNHO INTEGER NOT NULL,
JULHO INTEGER NOT NULL,
AGOSTO INTEGER NOT NULL,
SETEMBRO INTEGER NOT NULL,
OUTUBRO INTEGERNOT NULL,
NOVEMBRO INTEGER NOT NULL,
DEZEMBRO INTEGER NOT NULL,
PREVISTO BOOLEAN,
ANO VARCHAR(4),
CPF CHAR(14),
FOREIGN KEY (CPF) REFERENCES CABELEIREIRO(CPF)
);

CREATE TABLE IF NOT EXISTS ORCAMENTOSERVICO(
ID_ORCAMENTO INTEGER PRIMARY KEY AUTOINCREMENT,
NOMESERV VARCHAR(40) NOT NULL,
JANEIRO INTEGER NOT NULL,
FEVEREIRO INTEGER NOT NULL,
MARCO INTEGER NOT NULL,
ABRIL INTEGER NOT NULL,
MAIO INTEGER NOT NULL,
JUNHO INTEGER NOT NULL,
JULHO INTEGER NOT NULL,
AGOSTO INTEGER NOT NULL,
SETEMBRO INTEGER NOT NULL,
OUTUBRO INTEGERNOT NULL,
NOVEMBRO INTEGER NOT NULL,
DEZEMBRO INTEGER NOT NULL,
PREVISTO BOOLEAN,
ANO VARCHAR(4) NOT NULL,
ID_SERVICO INTEGER NOT NULL,
CPF CHAR(14),
FOREIGN KEY (CPF) REFERENCES CABELEIREIRO(CPF)
);



CREATE TABLE IF NOT EXISTS DESPESAMENSAL(
ID_DESPESA INTEGER PRIMARY KEY AUTOINCREMENT,
VALORPAGO INTEGER,
FORMAPAGAMENTO VARCHAR(10),
ANO VARCHAR(4) NOT NULL,
DATALANCAMENTO DATE NOT NULL,
DATAVENCIMENTO DATE NOT NULL,
DATAPAGAMENTO DATE,
STATUS BOOLEAN NOT NULL,
ANOTACAO TEXT,
ID_ORCAMENTO INTEGER NOT NULL,
FOREIGN KEY (ID_ORCAMENTO) REFERENCES ORCAMENTO(ID_ORCAMENTO)
);

/* TESTES DO MATEUS */
SELECT * FROM ITEM_COMPRA;
SELECT * FROM PRODUTO;
SELECT * FROM ESTOQUE;
SELECT QUINTAE, QUINTAS FROM CABELEIREIRO;
SELECT * FROM AGENDAMENTO;
SELECT * FROM ORCAMENTOSERVICO;
SELECT * FROM AGENDAMENTO_SERVICO;

/*SELECIONA COMPRA DO CABELEIREIRO*/
SELECT NOME,COMPRA.CPF_CLIENTE,VALORTOTAL, COMPRA.ID_COMPRA FROM CABELEIREIRO INNER JOIN COMPRA ON COMPRA.CPF_CLIENTE = CABELEIREIRO.CPF;

/*SELECIONA COMPRA DOS CLIENTE*/
SELECT NOME, VALORTOTAL,DATA FROM COMPRA INNER JOIN CLIENTE ON COMPRA.CPF_CLIENTE = CLIENTE.CPF ORDER BY NOME;

SELECT * FROM COMPRA;

/*SELECIONA PRODUTOS DA COMPRA DOS CLIENTE*/
            SELECT CLIENTE.NOME, ITEM_COMPRA.QUANTIDADE, PRODUTO.NOME, COMPRA.VALORTOTAL, COMPRA.ID_COMPRA FROM (( (COMPRA 
                INNER JOIN ITEM_COMPRA ON COMPRA.ID_COMPRA = ITEM_COMPRA.ID_COMPRA))
                INNER JOIN CLIENTE ON CLIENTE.CPF = COMPRA.CPF_CLIENTE)
                INNER JOIN PRODUTO ON ITEM_COMPRA.ID_PRODUTO =  PRODUTO.IDPRODUTO;
                
                
/*SELECIONA SERVIÇOS REALIZADO PELOS CLIENTES EM X AGENDAMENTO */
SELECT * FROM CLIENTE;
SELECT CLIENTE.NOME, SERVICO.NOME, AGENDAMENTO.ID_AGENDAMENTO FROM ((
             ((AGENDAMENTO_SERVICO 
             INNER JOIN SERVICO ON SERVICO.ID_SERVICO = AGENDAMENTO_SERVICO.ID_SERVICO )) 
             INNER JOIN AGENDAMENTO ON AGENDAMENTO.ID_AGENDAMENTO = AGENDAMENTO_SERVICO.ID_AGENDAMENTO)
             Inner JOIN CLIENTE ON CLIENTE.CPF ="500.494.768-66");
             

SELECT ID_AGENDAMENTO, DATA, HORARIO, REALIZADO, CPF_CLIENTE, CLIENTE.NOME FROM AGENDAMENTO 
    INNER JOIN CLIENTE ON AGENDAMENTO.CPF_CLIENTE = CLIENTE.CPF AND CLIENTE.NOME LIKE '%arlete%';


SELECT * FROM SERVICO;
SELECT * FROM AGENDAMENTO;
SELECT * FROM AGENDAMENTO_SERVICO;
SELECT * FROM CABELEIREIRO;
SELECT * FROM ORCAMENTOSERVICO;

PRAGMA foreign_keys = on;

DELETE FROM AGENDAMENTO;
DELETE FROM AGENDAMENTO_SERVICO;



/* RETORNA QTD DE UM SERVIÇO REALIZADO ENTRE DATAS ESPECÍFICAS */

SELECT SERVICO.NOME,SERVICO.ID_SERVICO,COUNT(AGENDAMENTO_SERVICO.ID_SERVICO) AS QUANTIDADE FROM AGENDAMENTO 
    INNER JOIN AGENDAMENTO_SERVICO
    ON AGENDAMENTO.ID_AGENDAMENTO = AGENDAMENTO_SERVICO.ID_AGENDAMENTO
    INNER JOIN SERVICO 
    ON SERVICO.ID_SERVICO = AGENDAMENTO_SERVICO.ID_SERVICO
WHERE AGENDAMENTO.DATA BETWEEN 1628564400000 AND 1628737200000 AND SERVICO.ID_SERVICO = 3;


/* CONTA  O NUMERO DE SERVIÇOS REALIZADOS (TOP 5 SERVIÇOS MAIS REALIZADOS NO ANO) */
SELECT COUNT(AGENDAMENTO_SERVICO.ID_SERVICO), AGENDAMENTO_SERVICO.ID_SERVICO, AGENDAMENTO.DATA, SERVICO.NOME FROM AGENDAMENTO_SERVICO 
INNER JOIN SERVICO ON SERVICO.ID_SERVICO = AGENDAMENTO_SERVICO.ID_SERVICO
INNER JOIN AGENDAMENTO ON AGENDAMENTO.DATA BETWEEN 1609459200000 AND 1640995200000 AND AGENDAMENTO.ID_AGENDAMENTO = AGENDAMENTO_SERVICO.ID_AGENDAMENTO
GROUP BY AGENDAMENTO_SERVICO.ID_SERVICO ORDER BY COUNT(AGENDAMENTO_SERVICO.ID_SERVICO) DESC LIMIT 5;

/* SELECIONA OS 10  PRODUTOOS MAIS VENDIDOS */
SELECT SUM(ITEM_VENDA.QUANTIDADE) AS QTD , PRODUTO.NOME
 FROM ITEM_VENDA
 INNER JOIN PRODUTO ON PRODUTO.IDPRODUTO = ITEM_VENDA.ID_PRODUTO
 INNER JOIN VENDA ON VENDA.ID_VENDA = ITEM_VENDA.ID_VENDA
 WHERE VENDA.DATA BETWEEN 1609459200000 AND 1640995200000
 GROUP BY ITEM_VENDA.ID_PRODUTO ORDER BY SUM(ITEM_VENDA.QUANTIDADE) DESC LIMIT 5;
 
/* SELECIONA OS 10  CLIENTES QUE MAIS VISITAM O SALÃO */
SELECT COUNT(AGENDAMENTO.CPF_CLIENTE) AS QTD, CLIENTE.NOME, CLIENTE.SOBRENOME FROM AGENDAMENTO
INNER JOIN CLIENTE ON CLIENTE.CPF = AGENDAMENTO.CPF_CLIENTE
WHERE AGENDAMENTO.DATA BETWEEN 1609459200000 AND 1640995200000
GROUP BY AGENDAMENTO.CPF_CLIENTE ORDER BY COUNT(AGENDAMENTO.CPF_CLIENTE) DESC LIMIT 2;


/* SELECIONA QTD DE VENDAS HJ */
SELECT COUNT(VENDA.ID_VENDA) FROM VENDA
    WHERE VENDA.DATA BETWEEN 1609459200000 AND 1640995200000;

/*SÓ DEUS SABE OQ FAZ */
SELECT SERVICO.NOME,SERVICO.ID_SERVICO, COUNT(AGENDAMENTO_SERVICO.ID_SERVICO) AS QUANTIDADE FROM AGENDAMENTO
                INNER JOIN AGENDAMENTO_SERVICO ON
                 AGENDAMENTO.ID_AGENDAMENTO = AGENDAMENTO_SERVICO.ID_AGENDAMENTO 
                INNER JOIN SERVICO  
                ON SERVICO.ID_SERVICO = AGENDAMENTO_SERVICO.ID_SERVICO 
                WHERE AGENDAMENTO.REALIZADO = TRUE;


SELECT AGENDAMENTO.DATA AS DATA, SERVICO.ID_SERVICO, SERVICO.NOME, SERVICO.PRECO FROM SERVICO 
    INNER JOIN AGENDAMENTO_SERVICO ON SERVICO.ID_SERVICO = AGENDAMENTO_SERVICO.ID_SERVICO 
    INNER JOIN AGENDAMENTO ON AGENDAMENTO.ID_AGENDAMENTO = AGENDAMENTO_SERVICO.ID_AGENDAMENTO
WHERE AGENDAMENTO.DATA BETWEEN 1609459200000 AND 1640995200000 ORDER BY AGENDAMENTO.DATA ASC;

/*SELECIONA OS PRODUTOS VENDIDOS POR DATA*/
SELECT COUNT(VENDA.ID_VENDA) AS QTD, * FROM VENDA WHERE VENDA.DATA BETWEEN 1609459200000 AND 1640995200000 ORDER BY DATA ASC;

INSERT INTO VENDA (DATA, VALORTOTAL, VALORDESCONTO, CPF_CLIENTE) VALUES (1612056675000, 2000, 0, "038.379.710-15");

/* TESTES DA MELISSA*/
SELECT * FROM CLIENTE WHERE CLIENTE.CPF = "731.082.660-47";
SELECT * FROM VENDA;
SELECT * FROM ITEM_VENDA;

/*RETORNAR PRODUTOS DE UMA COMPRA (ENTRE OUTROS) PELO CPF*/
SELECT PRODUTO.NOME, PRODUTO.MARCA, ITEM_VENDA.QUANTIDADE, VENDA.DATA, PRODUTO.PRECO  FROM ITEM_VENDA
INNER JOIN PRODUTO ON PRODUTO.IDPRODUTO = ITEM_VENDA.ID_PRODUTO
INNER JOIN VENDA ON VENDA.ID_VENDA = ITEM_VENDA.ID_VENDA
WHERE VENDA.CPF_CLIENTE = "731.082.660-47";

SELECT * FROM AGENDAMENTO;

SELECT * FROM CLIENTE;

SELECT * FROM VENDA;

SELECT SUM(AGENDAMENTO.TOTAL) AS RENDAMENSAL FROM AGENDAMENTO WHERE AGENDAMENTO.DATA BETWEEN ? AND ?;
SELECT SUM(VENDA.VALORTOTAL) AS RENDAMENSAL FROM VENDA WHERE VENDA.DATA BETWEEN ? AND ?;

/*RETORNAR SERVIÇOS REALIZADOS POR UM CLIENTE EM UM AGENDAMENTO*/
SELECT * FROM AGENDAMENTO_SERVICO
INNER JOIN SERVICO ON SERVICO.ID_SERVICO = AGENDAMENTO_SERVICO.ID_SERVICO
INNER JOIN AGENDAMENTO ON AGENDAMENTO.ID_AGENDAMENTO = AGENDAMENTO_SERVICO.ID_AGENDAMENTO
WHERE CPF_CLIENTE = "682.558.426-08" ORDER BY AGENDAMENTO.DATA ASC LIMIT 20;