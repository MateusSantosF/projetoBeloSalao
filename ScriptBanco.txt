/* SCRIPT CRIAÇÃO */

CREATE TABLE IF NOT EXISTS CLIENTE (
    NOME          VARCHAR (30) NOT NULL,
    SOBRENOME     VARCHAR (40) NOT NULL,
    EMAIL         VARCHAR (60),
    DATANASC      CHAR (10),
    CEP           CHAR (9),
    BAIRRO        VARCHAR (50),
    RUA           VARCHAR (60),
    NUMERO        VARCHAR (6),
    CIDADE        CHAR (4),
    TELEFONE      VARCHAR (15),
    CELULAR       VARCHAR (15),
    DATAREG       DATE,
    TIPODECABELO  INT          DEFAULT (12),
    TAMANHOCABELO INT          DEFAULT (4),
    CORCABELO     VARCHAR (16) DEFAULT [Não Informado],
    CONHECEU      INT          DEFAULT (5),
    FACEBOOK      VARCHAR (35) DEFAULT [Não Informado],
    INSTAGRAM     VARCHAR (35) DEFAULT [Não Informado],
    OBSERVACOES   TEXT         DEFAULT [Não Informado.],
    FOTOPERFIL    BLOB,
    ID            INTEGER      PRIMARY KEY AUTOINCREMENT,
    EXCLUIDO      BOOLEAN      DEFAULT (false) 
);

CREATE TRIGGER IF NOT EXISTS registraEmailUltimaVisita
         AFTER INSERT
            ON CLIENTE
BEGIN
    INSERT INTO EMAILULTIMAVISITA (
                                      ID_CLIENTE,
                                      ULTIMOENVIO
                                  )
                                  VALUES (
                                      (
                                          SELECT ID
                                            FROM CLIENTE
                                           ORDER BY ID DESC
                                           LIMIT 1
                                      ),
                                      NULL
                                  );
END;

CREATE TRIGGER IF NOT EXISTS registraEmailAniversario
         AFTER INSERT
            ON CLIENTE
BEGIN
    INSERT INTO EMAILANIVERSARIO (
                                     ID_CLIENTE,
                                     ULTIMOENVIO
                                 )
                                 VALUES (
                                     (
                                         SELECT ID
                                           FROM CLIENTE
                                          ORDER BY ID DESC
                                          LIMIT 1
                                     ),
                                     NULL
                                 );
END;

CREATE TABLE IF NOT EXISTS EMAILANIVERSARIO (
    ID_CLIENTE  INTEGER NOT NULL
                        REFERENCES CLIENTE (ID),
    ULTIMOENVIO DATE,
    FOREIGN KEY (
        ID_CLIENTE
    )
    REFERENCES CLIENTE
);

CREATE TABLE IF NOT EXISTS EMAILULTIMAVISITA (
    ID_CLIENTE  INTEGER NOT NULL
                        REFERENCES CLIENTE (ID),
    ULTIMOENVIO DATE,
    FOREIGN KEY (
        ID_CLIENTE
    )
    REFERENCES CLIENTE
);

CREATE TABLE IF NOT EXISTS COMPRA (
    ID_COMPRA     INTEGER  PRIMARY KEY AUTOINCREMENT,
    DATA          DATE,
    VALORTOTAL    INTEGER,
    VALORDESCONTO INTENGER
);

CREATE TABLE IF NOT EXISTS ITEM_COMPRA (
    ID_ITEMCOMPRA INTEGER PRIMARY KEY AUTOINCREMENT,
    PRECOUNITARIO INTEGER,
    QUANTIDADE    INT,
    PRECOTOTAL    INTEGER,
    ID_PRODUTO    INTEGER,
    ID_COMPRA     INTEGER,
    FOREIGN KEY (
        ID_PRODUTO
    )
    REFERENCES PRODUTO (IDPRODUTO),
    FOREIGN KEY (
        ID_COMPRA
    )
    REFERENCES COMPRA (ID_COMPRA) 
);


CREATE TABLE IF NOT EXISTS VENDA (
    ID_VENDA      INTEGER   PRIMARY KEY AUTOINCREMENT,
    DATA          DATE,
    VALORTOTAL    INTEGER,
    VALORDESCONTO INTENGER,
    CPF_CLIENTE   CHAR (14),
    ID_CLIENTE    INTEGER   NOT NULL
                            REFERENCES CLIENTE (ID),
    FOREIGN KEY (
        CPF_CLIENTE
    )
    REFERENCES CLIENTE
);

CREATE TABLE IF NOT EXISTS ITEM_VENDA (
    ID_ITEMVENDA  INTEGER    PRIMARY KEY AUTOINCREMENT,
    PRECOUNITARIO INTEGER,
    QUANTIDADE    INT,
    PRECOTOTAL    INTEGER,
    ID_PRODUTO    INTEGER,
    ID_VENDA      INTEGER,
    BOOLEAN       DADO_ATIVO,
    FOREIGN KEY (
        ID_PRODUTO
    )
    REFERENCES PRODUTO (IDPRODUTO),
    FOREIGN KEY (
        ID_VENDA
    )
    REFERENCES COMPRA (ID_VENDA) 
);

CREATE TABLE PRODUTO (
    IDPRODUTO INTEGER      PRIMARY KEY AUTOINCREMENT,
    NOME      VARCHAR (45) NOT NULL,
    MARCA     VARCHAR (45) NOT NULL,
    PRECO     INTEGER      NOT NULL,
    DATAREG   DATE         NOT NULL,
    EXCLUIDO  BOOLEAN      DEFAULT (false),
    CONSTRAINT iPRODUTO UNIQUE (
        NOME,
        MARCA
    )
);

CREATE TRIGGER IF NOT EXISTS exclusaoLogicaProduto
         AFTER UPDATE OF EXCLUIDO
            ON PRODUTO
BEGIN
    DELETE FROM PRODUTO_SERVICO
          WHERE ID_PRODUTO = old.IDPRODUTO;
    DELETE FROM ESTOQUE
          WHERE ESTOQUE.ID_PRODUTO = old.IDPRODUTO;
END;


CREATE TABLE IF NOT EXISTS SERVICO (
    ID_SERVICO INTEGER      PRIMARY KEY AUTOINCREMENT,
    NOME       VARCHAR (30) NOT NULL,
    PRECO      INTEGER      NOT NULL,
    TEMPOGASTO DATIME,
    EXCLUIDO   BOOLEAN      DEFAULT (false) 
);

CREATE TABLE IF NOT EXISTS PRODUTO_SERVICO (
    ID_PRODUTO INT,
    RENDIMENTO INT,
    ID_SERVICO INT,
    FOREIGN KEY (
        ID_PRODUTO
    )
    REFERENCES PRODUTO,
    FOREIGN KEY (
        ID_SERVICO
    )
    REFERENCES SERVICO (ID_SERVICO) 
);


CREATE TABLE IF NOT EXISTS CABELEIREIRO (
    CPF                   CHAR (14),
    EMAIL                 VARCHAR (60)                              NOT NULL,
    NOME                  VARCHAR (45)                              NOT NULL,
    SEGUNDAE              DATETIME,
    TERCAE                DATETIME,
    QUARTAE               DATETIME,
    QUINTAE               DATETIME,
    SEXTAE                DATETIME,
    SABADOE               DATETIME,
    DOMINGOE              DATETIME,
    SEGUNDAS              DATETIME,
    TERCAS                DATETIME,
    QUARTAS               DATETIME,
    QUINTAS               DATETIME,
    SEXTAS                DATETIME,
    SABADOS               DATETIME,
    DOMINGOS              DATETIME,
    ENVIARANIVERSARIO     BOOLEAN                                   DEFAULT 0,
    TITULOANIVERSARIO     VARCHAR (60)                              DEFAULT [Título não informado.],
    TEXTOANIVERSARIO      TEXT                                      DEFAULT "",
    ANEXOANIVERSARIO      [BLOOB NOMEANEXOANIVERSARIO VARCHAR] (60),
    NOMEANEXOANIVERSARIO  STRING (60),
    SENHA                 VARCHAR (45),
    ENVIARULTIMAVISITA    BOOLEAN                                   DEFAULT (FALSE),
    TITULOULTIMAVISITA    VARCHAR (60)                              DEFAULT [Título não informado],
    TEXTOULTIMAVISITA     TEXT                                      DEFAULT "",
    ANEXOULTIMAVISITA     BLOB,
    NOMEANEXOULTIMAVISITA VARCHAR (60),
    PERIODOULTIMAVISITA   INTEGER                                   DEFAULT (2),
    METADELUCRO           INTEGER                                   DEFAULT (0),
    ID                    INTEGER                                   PRIMARY KEY,
    POSTIT                TEXT
);



CREATE TABLE IF NOT EXISTS ESTOQUE (
    ID_ESTOQUE     INTEGER PRIMARY KEY AUTOINCREMENT,
    ID_PRODUTO     INTEGER NOT NULL,
    QUANTIDADE     INTEGER NOT NULL
                           DEFAULT 0,
    VALOR_UNITARIO INTEGER
);


CREATE TABLE IF NOT EXISTS AGENDAMENTO (
    ID_AGENDAMENTO   INTEGER      PRIMARY KEY AUTOINCREMENT,
    DATA             DATE         NOT NULL,
    HORARIO          DATETIME     NOT NULL,
    REALIZADO        BOOLEAN,
    TOTAL            INTEGER,
    DESCONTO         INTEGER,
    ID_CLIENTE       INTEGER      NOT NULL
                                  REFERENCES CLIENTE (ID),
    VALORADICIONAL   INTEGER,
    PAGO             BOOLEAN,
    FORMADEPAGAMENTO VARCHAR (15),
    FIMAGENDAMENTO   TIME
);


CREATE TABLE IF NOT EXISTS AGENDAMENTO_SERVICO (
    ID_AGENDAMENTO INTEGER,
    ID_SERVICO     INTEGER,
    FOREIGN KEY (
        ID_AGENDAMENTO
    )
    REFERENCES AGENDAMENTO (ID_AGENDAMENTO),
    FOREIGN KEY (
        ID_SERVICO
    )
    REFERENCES SERVICO (ID_SERVICO) 
);

CREATE TABLE IF NOT EXISTS ORCAMENTO (
    ID_ORCAMENTO INTEGER      PRIMARY KEY AUTOINCREMENT,
    NOME         VARCHAR (45) NOT NULL,
    JANEIRO      INTEGER      NOT NULL,
    FEVEREIRO    INTEGER      NOT NULL,
    MARCO        INTEGER      NOT NULL,
    ABRIL        INTEGER      NOT NULL,
    MAIO         INTEGER      NOT NULL,
    JUNHO        INTEGER      NOT NULL,
    JULHO        INTEGER      NOT NULL,
    AGOSTO       INTEGER      NOT NULL,
    SETEMBRO     INTEGER      NOT NULL,
    OUTUBRO      INTEGER      NOT NULL,
    NOVEMBRO     INTEGER      NOT NULL,
    DEZEMBRO     INTEGER      NOT NULL,
    PREVISTO     BOOLEAN,
    ANO          CHAR (5)
    REFERENCES CABELEIREIRO (CPF),
    CONSTRAINT iORCAMENTO UNIQUE (
        NOME,
        ANO
    )
);

CREATE TABLE IF NOT EXISTS  ORCAMENTOSERVICO (
    ID_ORCAMENTO INTEGER      PRIMARY KEY AUTOINCREMENT,
    NOMESERV     VARCHAR (45) NOT NULL,
    JANEIRO      INTEGER      NOT NULL,
    FEVEREIRO    INTEGER      NOT NULL,
    MARCO        INTEGER      NOT NULL,
    ABRIL        INTEGER      NOT NULL,
    MAIO         INTEGER      NOT NULL,
    JUNHO        INTEGER      NOT NULL,
    JULHO        INTEGER      NOT NULL,
    AGOSTO       INTEGER      NOT NULL,
    SETEMBRO     INTEGER      NOT NULL,
    OUTUBRO      INTEGER      NOT NULL,
    NOVEMBRO     INTEGER      NOT NULL,
    DEZEMBRO     INTEGER      NOT NULL,
    PREVISTO     BOOLEAN,
    ANO          CHAR (5)     NOT NULL,
    ID_SERVICO   INTEGER      NOT NULL,
    CONSTRAINT iORCAMENTOSERVICO UNIQUE (
        NOMESERV,
        ANO
    )
);

CREATE TABLE DESPESAMENSAL (
    ID_DESPESA     INTEGER      PRIMARY KEY AUTOINCREMENT,
    VALORPAGO      INTEGER,
    FORMAPAGAMENTO VARCHAR (15),
    ANO            CHAR(5)      NOT NULL,
    DATALANCAMENTO DATE         NOT NULL,
    DATAVENCIMENTO DATE         NOT NULL,
    DATAPAGAMENTO  DATE,
    STATUS         BOOLEAN      NOT NULL,
    ANOTACAO       TEXT,
    ID_ORCAMENTO   INTEGER      NOT NULL,
    FOREIGN KEY (
        ID_ORCAMENTO
    )
    REFERENCES ORCAMENTO (ID_ORCAMENTO) 
);








-- TESTES DO MATEUS

PRAGMA foreign_keys = OF;-- SELECIONA COMPRA DO CABELEIREIRO

SELECT * FROM EMAILANIVERSARIO;

SELECT NOME,
       COMPRA.CPF_CLIENTE,
       VALORTOTAL,
       COMPRA.ID_COMPRA
  FROM CABELEIREIRO
       INNER JOIN
       COMPRA ON COMPRA.CPF_CLIENTE = CABELEIREIRO.CPF;-- SELECIONA COMPRA DOS CLIENTE

SELECT NOME,
       VALORTOTAL,
       DATA
  FROM COMPRA
       INNER JOIN
       CLIENTE ON COMPRA.CPF_CLIENTE = CLIENTE.CPF
 ORDER BY NOME;

SELECT *
  FROM COMPRA;-- SELECIONA PRODUTOS DA COMPRA DOS CLIENTE

SELECT NOME  ||' '|| SOBRENOME AS NOMECOMPLETO FROM CLIENTE WHERE NOMECOMPLETO LIKE '%m%';

SELECT CLIENTE.NOME,
       ITEM_COMPRA.QUANTIDADE,
       PRODUTO.NOME,
       COMPRA.VALORTOTAL,
       COMPRA.ID_COMPRA
  FROM (
           (
               (
                   COMPRA
                   INNER JOIN
                   ITEM_COMPRA ON COMPRA.ID_COMPRA = ITEM_COMPRA.ID_COMPRA
               )
           )
           INNER JOIN
           CLIENTE ON CLIENTE.CPF = COMPRA.CPF_CLIENTE
       )
       INNER JOIN
       PRODUTO ON ITEM_COMPRA.ID_PRODUTO = PRODUTO.IDPRODUTO;-- SELECIONA SERVIÇOS REALIZADO PELOS CLIENTES EM X AGENDAMENTO

SELECT *
  FROM CLIENTE;

SELECT CLIENTE.NOME,
       SERVICO.NOME,
       AGENDAMENTO.ID_AGENDAMENTO
  FROM (
           (
               (
                   (
                       AGENDAMENTO_SERVICO
                       INNER JOIN
                       SERVICO ON SERVICO.ID_SERVICO = AGENDAMENTO_SERVICO.ID_SERVICO
                   )
               )
               INNER JOIN
               AGENDAMENTO ON AGENDAMENTO.ID_AGENDAMENTO = AGENDAMENTO_SERVICO.ID_AGENDAMENTO
           )
           INNER JOIN
           CLIENTE ON CLIENTE.CPF = "500.494.768-66"
       );

SELECT ID_AGENDAMENTO,
       DATA,
       HORARIO,
       REALIZADO,
       CPF_CLIENTE,
       CLIENTE.NOME
  FROM AGENDAMENTO
       INNER JOIN
       CLIENTE ON AGENDAMENTO.CPF_CLIENTE = CLIENTE.CPF AND 
                  CLIENTE.NOME LIKE '%arlete%';-- RETORNA QTD DE UM SERVIÇO REALIZADO ENTRE DATAS ESPECÍFICAS

SELECT SERVICO.NOME,
       SERVICO.ID_SERVICO,
       COUNT(AGENDAMENTO_SERVICO.ID_SERVICO) AS QUANTIDADE
  FROM AGENDAMENTO
       INNER JOIN
       AGENDAMENTO_SERVICO ON AGENDAMENTO.ID_AGENDAMENTO = AGENDAMENTO_SERVICO.ID_AGENDAMENTO
       INNER JOIN
       SERVICO ON SERVICO.ID_SERVICO = AGENDAMENTO_SERVICO.ID_SERVICO
 WHERE AGENDAMENTO.DATA BETWEEN 1628564400000 AND 1628737200000 AND 
       SERVICO.ID_SERVICO = 3;-- CONTA  O NUMERO DE SERVIÇOS REALIZADOS (TOP 5 SERVIÇOS MAIS REALIZADOS NO ANO)

SELECT COUNT(AGENDAMENTO_SERVICO.ID_SERVICO),
       AGENDAMENTO_SERVICO.ID_SERVICO,
       AGENDAMENTO.DATA,
       SERVICO.NOME
  FROM AGENDAMENTO_SERVICO
       INNER JOIN
       SERVICO ON SERVICO.ID_SERVICO = AGENDAMENTO_SERVICO.ID_SERVICO
       INNER JOIN
       AGENDAMENTO ON AGENDAMENTO.DATA BETWEEN 1609459200000 AND 1640995200000 AND 
                      AGENDAMENTO.ID_AGENDAMENTO = AGENDAMENTO_SERVICO.ID_AGENDAMENTO
 GROUP BY AGENDAMENTO_SERVICO.ID_SERVICO
 ORDER BY COUNT(AGENDAMENTO_SERVICO.ID_SERVICO) DESC
 LIMIT 5;-- SELECIONA OS 10  PRODUTOOS MAIS VENDIDOS

SELECT SUM(ITEM_VENDA.QUANTIDADE) AS QTD,
       PRODUTO.NOME
  FROM ITEM_VENDA
       INNER JOIN
       PRODUTO ON PRODUTO.IDPRODUTO = ITEM_VENDA.ID_PRODUTO
       INNER JOIN
       VENDA ON VENDA.ID_VENDA = ITEM_VENDA.ID_VENDA
 WHERE VENDA.DATA BETWEEN 1609459200000 AND 1640995200000
 GROUP BY ITEM_VENDA.ID_PRODUTO
 ORDER BY SUM(ITEM_VENDA.QUANTIDADE) DESC
 LIMIT 5;-- SELECIONA OS 10  CLIENTES QUE MAIS VISITAM O SALÃO

SELECT COUNT(AGENDAMENTO.CPF_CLIENTE) AS QTD,
       CLIENTE.NOME,
       CLIENTE.SOBRENOME
  FROM AGENDAMENTO
       INNER JOIN
       CLIENTE ON CLIENTE.CPF = AGENDAMENTO.CPF_CLIENTE
 WHERE AGENDAMENTO.DATA BETWEEN 1609459200000 AND 1640995200000
 GROUP BY AGENDAMENTO.CPF_CLIENTE
 ORDER BY COUNT(AGENDAMENTO.CPF_CLIENTE) DESC
 LIMIT 2;-- SELECIONA QTD DE VENDAS HJ

SELECT COUNT(VENDA.ID_VENDA) 
  FROM VENDA
 WHERE VENDA.DATA BETWEEN 1609459200000 AND 1640995200000;
 

-- SÓ DEUS SABE OQ FAZ

SELECT SERVICO.NOME,
       SERVICO.ID_SERVICO,
       COUNT(AGENDAMENTO_SERVICO.ID_SERVICO) AS QUANTIDADE
  FROM AGENDAMENTO
       INNER JOIN
       AGENDAMENTO_SERVICO ON AGENDAMENTO.ID_AGENDAMENTO = AGENDAMENTO_SERVICO.ID_AGENDAMENTO
       INNER JOIN
       SERVICO ON SERVICO.ID_SERVICO = AGENDAMENTO_SERVICO.ID_SERVICO
 WHERE AGENDAMENTO.REALIZADO = TRUE;

SELECT AGENDAMENTO.DATA AS DATA,
       SERVICO.ID_SERVICO,
       SERVICO.NOME,
       SERVICO.PRECO
  FROM SERVICO
       INNER JOIN
       AGENDAMENTO_SERVICO ON SERVICO.ID_SERVICO = AGENDAMENTO_SERVICO.ID_SERVICO
       INNER JOIN
       AGENDAMENTO ON AGENDAMENTO.ID_AGENDAMENTO = AGENDAMENTO_SERVICO.ID_AGENDAMENTO
 WHERE AGENDAMENTO.DATA BETWEEN 1609459200000 AND 1640995200000
 ORDER BY AGENDAMENTO.DATA ASC;-- SELECIONA OS PRODUTOS VENDIDOS POR DATA

SELECT COUNT(VENDA.ID_VENDA) AS QTD,
       *
  FROM VENDA
 WHERE VENDA.DATA BETWEEN 1609459200000 AND 1640995200000
 ORDER BY DATA ASC;

/* SELECIONA HISTORICO DE VENDAS

SELECT CLIENTE.NOME, CLIENTE.SOBRENOME, VENDA.DATA, VENDA.VALORTOTAL, PRODUTO.NOME AS NOMEPRODUTO FROM VENDA
    INNER JOIN CLIENTE ON CLIENTE.ID = VENDA.ID_CLIENTE 
    INNER JOIN ITEM_VENDA ON VENDA.ID_VENDA  = ITEM_VENDA.ID_VENDA
    INNER JOIN PRODUTO ON PRODUTO.IDPRODUTO = ITEM_VENDA.ID_PRODUTO
WHERE VENDA.DATA BETWEEN ? AND ?;


-- TESTES DA MELISSA

SELECT *
  FROM CLIENTE
 WHERE CLIENTE.CPF = "731.082.660-47";

SELECT *
  FROM VENDA;

SELECT *
  FROM ITEM_VENDA;-- RETORNAR PRODUTOS DE UMA COMPRA (ENTRE OUTROS) PELO CPF

SELECT PRODUTO.NOME,
       PRODUTO.MARCA,
       ITEM_VENDA.QUANTIDADE,
       VENDA.DATA,
       PRODUTO.PRECO
  FROM ITEM_VENDA
       INNER JOIN
       PRODUTO ON PRODUTO.IDPRODUTO = ITEM_VENDA.ID_PRODUTO
       INNER JOIN
       VENDA ON VENDA.ID_VENDA = ITEM_VENDA.ID_VENDA
 WHERE VENDA.CPF_CLIENTE = "731.082.660-47";

SELECT *
  FROM AGENDAMENTO;

SELECT *
  FROM CLIENTE;

SELECT *
  FROM VENDA;

SELECT SUM(AGENDAMENTO.TOTAL) AS RENDAMENSAL
  FROM AGENDAMENTO
 WHERE AGENDAMENTO.DATA BETWEEN ? AND ?;

SELECT SUM(VENDA.VALORTOTAL) AS RENDAMENSAL
  FROM VENDA
 WHERE VENDA.DATA BETWEEN ? AND ?;-- RETORNAR SERVIÇOS REALIZADOS POR UM CLIENTE EM UM AGENDAMENTO

SELECT *
  FROM AGENDAMENTO_SERVICO
       INNER JOIN
       SERVICO ON SERVICO.ID_SERVICO = AGENDAMENTO_SERVICO.ID_SERVICO
       INNER JOIN
       AGENDAMENTO ON AGENDAMENTO.ID_AGENDAMENTO = AGENDAMENTO_SERVICO.ID_AGENDAMENTO
 WHERE CPF_CLIENTE = "682.558.426-08"
 ORDER BY AGENDAMENTO.DATA ASC
 LIMIT 20;
