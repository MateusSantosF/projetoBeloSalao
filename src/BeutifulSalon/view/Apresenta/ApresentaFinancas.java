/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package BeutifulSalon.view.Apresenta;

import BeutifulSalon.controller.OrcamentoController;
import BeutifulSalon.dao.ExceptionDAO;
import BeutifulSalon.model.Dinheiro;
import BeutifulSalon.model.Orcamento;
import java.awt.Color;
import java.awt.Component;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author Mateus
 */
public class ApresentaFinancas extends javax.swing.JPanel {

    /**
     * Creates new form ApreFinancas
     */
    public ApresentaFinancas() {
        initComponents();
        
        new BeutifulSalon.model.AplicaLookAndFeel().pegaNimbus();
        listarTodosOrcamentos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        container = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableConsultaOrcamento = new javax.swing.JTable();
        jButtonExcluir = new javax.swing.JButton();
        jButtonEditar = new javax.swing.JButton();
        jLabelSearch = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldAno = new javax.swing.JFormattedTextField();

        container.setBackground(new java.awt.Color(243, 244, 245));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(34, 34, 34));
        jLabel2.setText("Confira o orçamento previsto do seu salão");

        jLabel1.setBackground(new java.awt.Color(34, 34, 34));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(34, 34, 34));
        jLabel1.setText("Finanças");

        jScrollPane2.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane2.setBorder(null);
        jScrollPane2.setForeground(new java.awt.Color(255, 255, 255));
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setViewportBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jScrollPane2.setAutoscrolls(true);
        jScrollPane2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jScrollPane2.setPreferredSize(new java.awt.Dimension(1011, 80));

        jTableConsultaOrcamento.setBackground(new java.awt.Color(255, 255, 255));
        jTableConsultaOrcamento.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Nome", "Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro", "id_orcamento"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableConsultaOrcamento.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jTableConsultaOrcamento.setGridColor(new java.awt.Color(34, 34, 34));
        jTableConsultaOrcamento.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jTableConsultaOrcamento.setShowGrid(true);
        jScrollPane2.setViewportView(jTableConsultaOrcamento);
        if (jTableConsultaOrcamento.getColumnModel().getColumnCount() > 0) {
            jTableConsultaOrcamento.getColumnModel().getColumn(13).setMinWidth(1);
            jTableConsultaOrcamento.getColumnModel().getColumn(13).setMaxWidth(1);
        }

        jButtonExcluir.setBackground(new java.awt.Color(248, 67, 69));
        jButtonExcluir.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonExcluir.setForeground(new java.awt.Color(255, 255, 255));
        jButtonExcluir.setText("Excluir");
        jButtonExcluir.setBorder(null);
        jButtonExcluir.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonExcluir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonExcluir.setPreferredSize(new java.awt.Dimension(150, 65));
        jButtonExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExcluirActionPerformed(evt);
            }
        });

        jButtonEditar.setBackground(new java.awt.Color(57, 201, 114));
        jButtonEditar.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonEditar.setForeground(new java.awt.Color(255, 255, 255));
        jButtonEditar.setText("Editar");
        jButtonEditar.setBorder(null);
        jButtonEditar.setBorderPainted(false);
        jButtonEditar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonEditar.setFocusPainted(false);
        jButtonEditar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonEditar.setPreferredSize(new java.awt.Dimension(150, 65));
        jButtonEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditarActionPerformed(evt);
            }
        });

        jLabelSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/iconLupa.png"))); // NOI18N
        jLabelSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabelSearchMousePressed(evt);
            }
        });

        jLabel3.setText("Busca por Ano");

        jTextFieldAno.setBackground(new java.awt.Color(255, 255, 255));
        jTextFieldAno.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("y"))));

        javax.swing.GroupLayout containerLayout = new javax.swing.GroupLayout(container);
        container.setLayout(containerLayout);
        containerLayout.setHorizontalGroup(
            containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, containerLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, containerLayout.createSequentialGroup()
                        .addGroup(containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(containerLayout.createSequentialGroup()
                                .addComponent(jTextFieldAno, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelSearch)))
                        .addGap(62, 62, 62))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, containerLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(20, 20, 20))))
            .addGroup(containerLayout.createSequentialGroup()
                .addGroup(containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(containerLayout.createSequentialGroup()
                        .addGap(225, 225, 225)
                        .addComponent(jButtonEditar, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                        .addGap(81, 81, 81)
                        .addComponent(jButtonExcluir, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE))
                    .addGroup(containerLayout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))))
                .addGap(332, 332, 332))
        );
        containerLayout.setVerticalGroup(
            containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, containerLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(26, 26, 26)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldAno, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE)
                .addGap(30, 30, 30)
                .addGroup(containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonEditar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(91, 91, 91))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 980, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(container, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 750, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(container, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExcluirActionPerformed

        int indice = jTableConsultaOrcamento.getSelectedRow();
        System.out.println(indice);

        int opc = JOptionPane.showConfirmDialog(null,"Tem certeza que deseja excluir este orçamento?: " +
            jTableConsultaOrcamento.getValueAt(indice, 0), "Excluir Orçamento", JOptionPane.YES_NO_OPTION);

        if(opc == 0){
            if( indice > -1){
                try {

                    long id_orcamento = (long) jTableConsultaOrcamento.getValueAt(indice, 13); // Retorna ID_ORÇAMENTO

                    OrcamentoController oc = new OrcamentoController();

                    if(oc.excluirOrcamento(id_orcamento)){
                        JOptionPane.showMessageDialog(null, "Orçamento deletado com sucesso.");
                        listarTodosOrcamentos();

                    }else{
                        JOptionPane.showMessageDialog(null, "Não foi possível excluir o Orçamento. Selecione um índice válido na tabela");
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null,"Erro ao excluir orçamento: " + e);
                }

            }
        }
    }//GEN-LAST:event_jButtonExcluirActionPerformed
 
    private void listarTodosOrcamentos(){
        
        DefaultTableModel tabelaOrcamentoModel = (DefaultTableModel) jTableConsultaOrcamento.getModel(); // tabela
        tabelaOrcamentoModel.setRowCount(0);
       
        OrcamentoController oc = new OrcamentoController();
        
       
        ArrayList<Orcamento> orcamentos = null;
        
        try {
            orcamentos = oc.listarOrcamentos();
        } catch (ExceptionDAO ex) {
            java.util.logging.Logger.getLogger(ApresentaFinancas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
            
            try {
               orcamentos.forEach((Orcamento orcamento) -> {
                 tabelaOrcamentoModel.addRow(new Object[] {
                     
                       orcamento.getNome(),
                       Dinheiro.parseString(orcamento.getJan()), 
                       Dinheiro.parseString(orcamento.getFev()),
                       Dinheiro.parseString(orcamento.getMar()),
                       Dinheiro.parseString(orcamento.getAbr()),
                       Dinheiro.parseString(orcamento.getMai()), 
                       Dinheiro.parseString(orcamento.getJun()),
                       Dinheiro.parseString(orcamento.getJul()),
                       Dinheiro.parseString(orcamento.getAgo()), 
                       Dinheiro.parseString(orcamento.getSet()),
                       Dinheiro.parseString(orcamento.getOut()),
                       Dinheiro.parseString(orcamento.getNov()),
                       Dinheiro.parseString(orcamento.getDez()),
                       orcamento.getId_orcamento()

                   });
                   
            
               });     
               
           
               
            SimpleDateFormat df = new SimpleDateFormat("yyyy");
            java.util.Date ano = new java.util.Date();
               
               tabelaOrcamentoModel.addRow(new Object[] {"TOTAL", 
                                                        Dinheiro.parseString(Dinheiro.parseBigDecimal(oc.somarOrcamento("JANEIRO",df.format(ano)))),
                                                        Dinheiro.parseString(Dinheiro.parseBigDecimal(oc.somarOrcamento("FEVEREIRO",df.format(ano)))),
                                                        Dinheiro.parseString(Dinheiro.parseBigDecimal(oc.somarOrcamento("MARCO",df.format(ano)))),
                                                        Dinheiro.parseString(Dinheiro.parseBigDecimal(oc.somarOrcamento("ABRIL",df.format(ano)))),
                                                        Dinheiro.parseString(Dinheiro.parseBigDecimal(oc.somarOrcamento("MAIO",df.format(ano)))),
                                                        Dinheiro.parseString(Dinheiro.parseBigDecimal(oc.somarOrcamento("JUNHO",df.format(ano)))),
                                                        Dinheiro.parseString(Dinheiro.parseBigDecimal(oc.somarOrcamento("JULHO",df.format(ano)))),
                                                        Dinheiro.parseString(Dinheiro.parseBigDecimal(oc.somarOrcamento("AGOSTO",df.format(ano)))),
                                                        Dinheiro.parseString(Dinheiro.parseBigDecimal(oc.somarOrcamento("SETEMBRO",df.format(ano)))),
                                                        Dinheiro.parseString(Dinheiro.parseBigDecimal(oc.somarOrcamento("OUTUBRO",df.format(ano)))),
                                                        Dinheiro.parseString(Dinheiro.parseBigDecimal(oc.somarOrcamento("NOVEMBRO",df.format(ano)))),
                                                        Dinheiro.parseString(Dinheiro.parseBigDecimal(oc.somarOrcamento("DEZEMBRO",df.format(ano)))),
                      
                                                        });
                
             
         
            jTableConsultaOrcamento.setModel(tabelaOrcamentoModel);
            
            jTableConsultaOrcamento.getColumnModel().getColumn(0).setCellRenderer(new FormatacaoConteudo(Color.WHITE, jTableConsultaOrcamento.getRowCount()-1));
              
               
             
            } catch (ExceptionDAO e) {
                JOptionPane.showMessageDialog(null,"Erro ao listar Orçamentos" + e);
            }
    }
    
    public class FormatacaoConteudo extends DefaultTableCellRenderer implements TableCellRenderer {

        
        private Color color;
        private int row = -1;
        
        public FormatacaoConteudo(Color color, int row){
            super();
            this.color = color;
            this.row = row;
	}
     
        @Override
        public Component getTableCellRendererComponent(JTable table, 
                                                        Object value, boolean isSelected, 
                                                        boolean hasFocus, int row, int column) {
            
            Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            
            if( row != -1 && color != null){
                if( row == this.row){
                    c.setBackground( new Color( 0, 0, 0));
                    c.setForeground(this.color );
                }else{
                   c.setBackground( new Color( 255, 255, 255)); 
                   c.setForeground( new Color(0,0,0) ); 
                } 
            }
           
      
            return c;

        }
    
    }
    
 
    public void listarTodosOrcamentos(String ano){
        
        DefaultTableModel tabelaOrcamentoModel = (DefaultTableModel) jTableConsultaOrcamento.getModel(); // tabela
        tabelaOrcamentoModel.setRowCount(0);
       
        OrcamentoController oc = new OrcamentoController();
        
       
        ArrayList<Orcamento> orcamentos = null;
        
        try {
            orcamentos = oc.listarOrcamentos(ano);
        } catch (ExceptionDAO ex) {
            java.util.logging.Logger.getLogger(ApresentaFinancas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
            
            try {
               orcamentos.forEach((Orcamento orcamento) -> {
                 tabelaOrcamentoModel.addRow(new Object[] {
                                                        orcamento.getNome(),
                                                        Dinheiro.parseString(orcamento.getJan()),
                                                        Dinheiro.parseString(orcamento.getFev()),
                                                        Dinheiro.parseString(orcamento.getMar()),
                                                        Dinheiro.parseString(orcamento.getAbr()),
                                                        Dinheiro.parseString(orcamento.getMai()),
                                                        Dinheiro.parseString(orcamento.getJun()),
                                                        Dinheiro.parseString(orcamento.getJul()),
                                                        Dinheiro.parseString(orcamento.getAgo()),
                                                        Dinheiro.parseString(orcamento.getSet()),
                                                        Dinheiro.parseString(orcamento.getOut()),
                                                        Dinheiro.parseString(orcamento.getNov()),
                                                        Dinheiro.parseString(orcamento.getDez()),
                                                        orcamento.getId_orcamento(),
                                                        
                                                        });
            
               });
               
         
               
               tabelaOrcamentoModel.addRow(new Object[] {"TOTAL", 
                                                        Dinheiro.parseString(Dinheiro.parseBigDecimal(oc.somarOrcamento("JANEIRO", ano ))),
                                                        Dinheiro.parseString(Dinheiro.parseBigDecimal(oc.somarOrcamento("FEVEREIRO", ano))),
                                                        Dinheiro.parseString(Dinheiro.parseBigDecimal(oc.somarOrcamento("MARCO",ano))),
                                                        Dinheiro.parseString(Dinheiro.parseBigDecimal(oc.somarOrcamento("ABRIL",ano))),
                                                        Dinheiro.parseString(Dinheiro.parseBigDecimal(oc.somarOrcamento("MAIO", ano))),
                                                        Dinheiro.parseString(Dinheiro.parseBigDecimal(oc.somarOrcamento("JUNHO", ano))),
                                                        Dinheiro.parseString(Dinheiro.parseBigDecimal(oc.somarOrcamento("JULHO", ano))),
                                                        Dinheiro.parseString(Dinheiro.parseBigDecimal(oc.somarOrcamento("AGOSTO", ano))),
                                                        Dinheiro.parseString(Dinheiro.parseBigDecimal(oc.somarOrcamento("SETEMBRO", ano))),
                                                        Dinheiro.parseString(Dinheiro.parseBigDecimal(oc.somarOrcamento("OUTUBRO", ano))),
                                                        Dinheiro.parseString(Dinheiro.parseBigDecimal(oc.somarOrcamento("NOVEMBRO", ano))),
                                                        Dinheiro.parseString(Dinheiro.parseBigDecimal(oc.somarOrcamento("DEZEMBRO", ano)))
                         
                                                        });
               
               jTableConsultaOrcamento.setModel(tabelaOrcamentoModel);
               
               //Pinta campo total
               jTableConsultaOrcamento.getColumnModel().getColumn(0).setCellRenderer(new FormatacaoConteudo(Color.WHITE, jTableConsultaOrcamento.getRowCount()-1));

                
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null,"Erro ao listar Orçamentos" + e);
            }
    }
    
    private void jButtonEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditarActionPerformed

        boolean resultado;
        int indice = jTableConsultaOrcamento.getSelectedRow();

        if( indice > -1){
            try {

                long  id_orcamento = (long) jTableConsultaOrcamento.getValueAt(indice, 13); // Retorna IDORCAMENTO
                OrcamentoController oc = new OrcamentoController();
                resultado = oc.editarCliente(id_orcamento);

                if (!resultado) {
                    JOptionPane.showMessageDialog(null, "Erro ao selecionar PKOrçamento");
                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null,"Erro ao retornar informações do orçamento: " + e);
            }
        }else{

            JOptionPane.showMessageDialog(null, "Selecione um orçamento.");
        }
    }//GEN-LAST:event_jButtonEditarActionPerformed

    private void jLabelSearchMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelSearchMousePressed

        if(jTextFieldAno.getText().equals("")){
            SimpleDateFormat df = new SimpleDateFormat("yyyy");
            java.util.Date ano = new java.util.Date();
            listarTodosOrcamentos(df.format(ano).toString());
        }else{
            listarTodosOrcamentos(jTextFieldAno.getText());
        }

    }//GEN-LAST:event_jLabelSearchMousePressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel container;
    private javax.swing.JButton jButtonEditar;
    private javax.swing.JButton jButtonExcluir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelSearch;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableConsultaOrcamento;
    private javax.swing.JFormattedTextField jTextFieldAno;
    // End of variables declaration//GEN-END:variables
}
